# encoding: UTF-8

import os
import re
import sys
import importlib
import unittest


def ensure_init_py(root: str, encoding='UTF-8'):
    """
    确保 root 下存在 __init__.py
    """
    init_py = os.path.join(root, '__init__.py')
    if not os.path.isfile(init_py):
        code = f'# encoding: {encoding}\n# Automatically generated by test/test_all.py:ensure_init_py\n'
        with open(init_py, 'w', encoding=encoding) as init_py:
            init_py.write(code)


def for_each_case(handle: callable):
    root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    sys.path.insert(0, root)
    ensure_init_py(os.path.dirname(os.path.abspath(__file__)))
    from test.test_framework import TestFramework
    handle('Framework', TestFramework)
    solutions = os.path.join(root, 'solutions')
    ensure_init_py(solutions)
    kyus = [item for item in os.listdir(solutions) if re.match(r'kyu\d', item)]
    for kyu in kyus:
        prefix = 'solutions.{}'.format(kyu)
        kyu_dir = os.path.join(solutions, kyu)
        ensure_init_py(kyu_dir)
        for item in os.listdir(kyu_dir):
            name = '{}.{}'.format(prefix, os.path.splitext(os.path.basename(item))[0])
            try:
                s = importlib.import_module(name)
            except:
                print(f'WARNING: cannot import {name}', file=sys.stderr)
                continue
            for key in dir(s):
                cls = getattr(s, key)
                if type(cls) is type and issubclass(cls, unittest.TestCase):
                    handle(kyu, cls)


class Run:
    def __init__(self):
        self.runner = unittest.TextTestRunner()
        self.success = True

    def __call__(self, kyu: str, cls: str):
        show_name = '{}::{}'.format(kyu, cls.__name__)
        print('Testing: {}'.format(show_name), file=sys.stderr)
        suite = unittest.defaultTestLoader.loadTestsFromTestCase(cls)
        result = self.runner.run(suite)
        self.success &= result.wasSuccessful()

    def return_code(self) -> int:
        return 0 if self.success else -1


class Inject:
    def __init__(self, namespace: dict):
        self.namespace = namespace

    def __call__(self, kyu: str, cls: str):
        # 强制 Unittest 逐 kyu 按字典非减序执行
        self.namespace[kyu + cls.__name__] = cls


if __name__ == '__main__':
    handler = Run()
    for_each_case(handler)
    exit(handler.return_code())
else:
    for_each_case(Inject(globals()))
